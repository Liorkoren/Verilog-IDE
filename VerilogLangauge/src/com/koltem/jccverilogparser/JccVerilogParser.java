/* Generated By:JavaCC: Do not edit this line. JccVerilogParser.java */
package com.koltem.jccverilogparser ;

import java.io.*;
import java.util.*;

/**
 * Grammar to parse Verilog version 0.1
 * @author Lior Koren
 */
public class JccVerilogParser implements JccVerilogParserConstants {
    static public List<ParseException> syntaxErrors = new ArrayList<ParseException>();

   /**
    * Class to hold modifiers.
    */
   static public final class ModifierSet
   {
     /* Definitions of the bits in the modifiers field.  */
     public static final int PUBLIC = 0x0001;
     public static final int PROTECTED = 0x0002;
     public static final int LOCAL = 0x0004;
     public static final int PURE = 0x0008;
     public static final int STATIC = 0x0010;
     public static final int CONST = 0x0020;
     public static final int VIRTUAL = 0x0040;
     public static final int TAGGED = 0x0080;
     public static final int DEFAULT = 0x0100;
     public static final int EXTERN = 0x0200;
     public static final int CONTEXT = 0x1000;

     /** A set of accessors that indicate whether the specified modifier
         is in the set. */

     public boolean isPublic(int modifiers)
     {
       return (modifiers & PUBLIC) != 0;
     }

     public boolean isProtected(int modifiers)
     {
       return (modifiers & PROTECTED) != 0;
     }

     public boolean isLocal(int modifiers)
     {
       return (modifiers & LOCAL) != 0;
     }

     public boolean isStatic(int modifiers)
     {
       return (modifiers & STATIC) != 0;
     }

     public boolean isPure(int modifiers)
     {
       return (modifiers & PURE) != 0;
     }

     public boolean isConst(int modifiers)
     {
       return (modifiers & CONST) != 0;
     }

     public boolean isTagged(int modifiers)
     {
       return (modifiers & TAGGED) != 0;
     }

     public boolean isContext(int modifiers)
     {
       return (modifiers & CONTEXT) != 0;
     }

     public boolean isVirtual(int modifiers)
     {
       return (modifiers & VIRTUAL) != 0;
     }

     public boolean isDefault(int modifiers)
      {
       return (modifiers & DEFAULT) != 0;
     }

     public boolean isExtern(int modifiers)
     {
       return (modifiers & EXTERN) != 0;
     }

     /**
      * Removes the given modifier.
      */
     static int removeModifier(int modifiers, int mod)
     {
        return modifiers & ~mod;
     }
   }

   public JccVerilogParser(String fileName)
   {
      this(System.in);
      try { ReInit(new FileInputStream(new File(fileName))); }
      catch(Exception e) { e.printStackTrace(); }
   }

  public static void main(String args[]) {
    JccVerilogParser parser;
    if (args.length == 0) {
      System.out.println("Verilog Parser Version 1.0:  Reading from standard input . . .");
      parser = new JccVerilogParser(System.in);
    } else if (args.length == 1) {
      System.out.println("Verilog Parser Version 1.0:  Reading from file " + args[0] + " . . .");
      try {
        parser = new JccVerilogParser(new java.io.FileInputStream(args[0]));
      } catch (java.io.FileNotFoundException e) {
        System.out.println("Verilog Parser Version 1.0:  File " + args[0] + " not found.");
        return;
      }
    } else {
      System.out.println("Verilog Parser Version 1.0:  Usage is one of:");
      System.out.println("         java VerilogParser < inputfile");
      System.out.println("OR");
      System.out.println("         java VerilogParser inputfile");
      return;
    }
    try {
      parser.SourceText();
      System.out.println("Verilog Parser Version 1.0:  Verilog program parsed successfully.");
    } catch (ParseException ex) {
      System.out.println(ex.getMessage());
      System.out.println("Verilog Parser Version 1.0:  Encountered errors during parse.");
    }
  }
    void recover(ParseException ex, int recoveryPoint) {
        syntaxErrors.add(ex);
        System.out.println("In recovery Skipping:");
        Token t;
        do {
            t = getNextToken();
            System.out.printf("%s",t.toString());
        } while (t.kind != EOF && t.kind != recoveryPoint);
    }

/*****************************************
 * THE VERILOG LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Program structuring syntax follows.
 */

/*
 *  A.1 Source Text
 */


/*
 * A.1.3 Module and primitive source text
 */
  final public void SourceText() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TIMEPRECISION:
    case TIMEUNIT:
      TimeunitsDeclaration();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTERN:
      case MACROMODULE:
      case MODULE:
      case 166:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      Description();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 153:
      jj_consume_token(153);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STUFF_TO_IGNORE:
      jj_consume_token(STUFF_TO_IGNORE);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(0);
  }

  final public void Description() throws ParseException {
    ModuleDeclaration();
  }

  final public void ModuleNonAnsiHeader() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 166:
        AttributeInstance();
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      ModuleKeyword();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AUTOMATIC:
      case STATIC:
        LifeTime();
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        ListOfPorts();
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (ParseException ex) {
    recover (ex,SEMICOLON);
    }
  }

  final public void ModuleAnsiHeader() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 166:
        AttributeInstance();
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      ModuleKeyword();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AUTOMATIC:
      case STATIC:
        LifeTime();
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INOUT:
      case INPUT:
      case INT:
      case OUTPUT:
      case REF:
      case SUPPLY0:
      case SUPPLY1:
      case TRI:
      case TRI0:
      case TRI1:
      case TRIAND:
      case TRIOR:
      case TRIREG:
      case WAND:
      case WIRE:
      case WOR:
        ListOfPortsDeclerations();
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (ParseException ex) {
    recover (ex,SEMICOLON);
    }
  }

  final public void ModuleWildcardHeader() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 166:
        AttributeInstance();
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      ModuleKeyword();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AUTOMATIC:
      case STATIC:
        LifeTime();
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      jj_consume_token(IDENTIFIER);
      jj_consume_token(LPAREN);
      jj_consume_token(155);
      jj_consume_token(RPAREN);
      jj_consume_token(SEMICOLON);
    } catch (ParseException ex) {
    recover (ex,SEMICOLON);
    }
  }

  final public void ModuleDeclaration() throws ParseException {
    if (jj_2_1(3)) {
      ModuleNonAnsiHeader();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INOUT:
        case INPUT:
        case OUTPUT:
        case 166:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_2;
        }
        ModuleItem();
      }
      jj_consume_token(ENDMODULE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLON:
        jj_consume_token(COLON);
        jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
    } else if (jj_2_2(3)) {
      ModuleAnsiHeader();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INOUT:
        case INPUT:
        case OUTPUT:
        case 166:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_3;
        }
        ModuleItem();
      }
      jj_consume_token(ENDMODULE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLON:
        jj_consume_token(COLON);
        jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
    } else if (jj_2_3(3)) {
      ModuleWildcardHeader();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INOUT:
        case INPUT:
        case OUTPUT:
        case 166:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_4;
        }
        ModuleItem();
      }
      jj_consume_token(ENDMODULE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLON:
        jj_consume_token(COLON);
        jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
    } else if (jj_2_4(2)) {
      jj_consume_token(EXTERN);
      ModuleNonAnsiHeader();
    } else if (jj_2_5(2)) {
      jj_consume_token(EXTERN);
      ModuleAnsiHeader();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ModuleKeyword() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MODULE:
      jj_consume_token(MODULE);
      break;
    case MACROMODULE:
      jj_consume_token(MACROMODULE);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void TimeunitsDeclaration() throws ParseException {
    if (jj_2_6(4)) {
      jj_consume_token(TIMEUNIT);
      TimeLiteral();
      jj_consume_token(SEMICOLON);
    } else if (jj_2_7(4)) {
      jj_consume_token(TIMEPRECISION);
      TimeLiteral();
      jj_consume_token(SEMICOLON);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMEUNIT:
        jj_consume_token(TIMEUNIT);
        TimeLiteral();
        jj_consume_token(SEMICOLON);
        jj_consume_token(TIMEPRECISION);
        TimeLiteral();
        jj_consume_token(SEMICOLON);
        break;
      case TIMEPRECISION:
        jj_consume_token(TIMEPRECISION);
        TimeLiteral();
        jj_consume_token(SEMICOLON);
        jj_consume_token(TIMEUNIT);
        TimeLiteral();
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/*
 *  A.1.4   Module parameters and ports
 */
  final public void ListOfPorts() throws ParseException {
    jj_consume_token(LPAREN);
    Port();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMMA);
      Port();
    }
    jj_consume_token(RPAREN);
  }

  final public void ListOfPortsDeclerations() throws ParseException {
    AnsiPortDeclaration();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_6;
      }
      jj_consume_token(COMMA);
      AnsiPortDeclaration();
    }
  }

  final public void PortDeclaration() throws ParseException {
    if (jj_2_8(2)) {
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 166:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_7;
        }
        AttributeInstance();
      }
      InoutDeclaration();
    } else if (jj_2_9(2)) {
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 166:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_8;
        }
        AttributeInstance();
      }
      InputDeclaration();
    } else if (jj_2_10(2)) {
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 166:
          ;
          break;
        default:
          jj_la1[24] = jj_gen;
          break label_9;
        }
        AttributeInstance();
      }
      OutputDeclaration();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Port() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
    case LBRACE:
      PortExpression();
      break;
    case DOT:
      jj_consume_token(DOT);
      jj_consume_token(IDENTIFIER);
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case LBRACE:
        PortExpression();
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void PortExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      PortReference();
      break;
    case LBRACE:
      jj_consume_token(LBRACE);
      PortReference();
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[27] = jj_gen;
          break label_10;
        }
        jj_consume_token(COMMA);
        PortReference();
      }
      jj_consume_token(RBRACE);
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void PortReference() throws ParseException {
    jj_consume_token(IDENTIFIER);
    ConstantSelect();
  }

  final public void PortDirection() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INPUT:
      jj_consume_token(INPUT);
      break;
    case OUTPUT:
      jj_consume_token(OUTPUT);
      break;
    case INOUT:
      jj_consume_token(INOUT);
      break;
    case REF:
      jj_consume_token(REF);
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void NetPortHeader() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INOUT:
    case INPUT:
    case OUTPUT:
    case REF:
      PortDirection();
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
    PortType();
  }

  final public void VariablePortHeader() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INOUT:
    case INPUT:
    case OUTPUT:
    case REF:
      PortDirection();
      break;
    default:
      jj_la1[31] = jj_gen;
      ;
    }
    DataType();
  }

  final public void AnsiPortDeclaration() throws ParseException {
    if (jj_2_11(2)) {
      NetPortHeader();
      jj_consume_token(IDENTIFIER);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case BANG:
        case TILDE:
        case PLUS:
        case MINUS:
        case BIT_AND:
        case BIT_OR:
        case XOR:
        case NXOR:
        case XNOT:
        case 164:
        case 165:
          ;
          break;
        default:
          jj_la1[32] = jj_gen;
          break label_11;
        }
        UnpackedDimension();
      }
    } else if (jj_2_12(2)) {
      VariablePortHeader();
      jj_consume_token(IDENTIFIER);
      VariableDimension();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        ConstantExpression();
        break;
      default:
        jj_la1[33] = jj_gen;
        ;
      }
    } else if (jj_2_13(2)) {
      NetPortHeader();
      jj_consume_token(DOT);
      jj_consume_token(IDENTIFIER);
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case BANG:
      case TILDE:
      case PLUS:
      case MINUS:
      case BIT_AND:
      case BIT_OR:
      case XOR:
      case NXOR:
      case XNOT:
      case 164:
      case 165:
        Expression();
        break;
      default:
        jj_la1[34] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    } else if (jj_2_14(2)) {
      VariablePortHeader();
      jj_consume_token(DOT);
      jj_consume_token(IDENTIFIER);
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case BANG:
      case TILDE:
      case PLUS:
      case MINUS:
      case BIT_AND:
      case BIT_OR:
      case XOR:
      case NXOR:
      case XNOT:
      case 164:
      case 165:
        Expression();
        break;
      default:
        jj_la1[35] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/*
 *  A.1.5   Module items
 */
  final public void ModuleItem() throws ParseException {
    try {
      PortDeclaration();
      jj_consume_token(SEMICOLON);
    } catch (ParseException ex) {
    recover (ex,SEMICOLON);
    }
  }

/*
 *  A.2 Declarations
 */

/*
 *  A.2.1   Declaration types
 */

/*
 *  A.2.1.2     Port Declarations
 */
  final public void InoutDeclaration() throws ParseException {
    jj_consume_token(INOUT);
    PortType();
    ListOfPortIdentifiers();
  }

  final public void InputDeclaration() throws ParseException {
    jj_consume_token(INPUT);
    PortType();
    ListOfPortIdentifiers();
    jj_consume_token(INPUT);
    DataType();
    ListOfVariablePortIdentifiers();
  }

  final public void OutputDeclaration() throws ParseException {
    jj_consume_token(OUTPUT);
    PortType();
    ListOfPortIdentifiers();
    jj_consume_token(OUTPUT);
    DataType();
    ListOfVariablePortIdentifiers();
  }

/*
 *  A.2.1.3     Type Declarations
 */
  final public void VariableDeclaration() throws ParseException {
    DataType();
    ListOfVariableDeclAssignments();
    jj_consume_token(SEMICOLON);
  }

  final public void LifeTime() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATIC:
      jj_consume_token(STATIC);
      break;
    case AUTOMATIC:
      jj_consume_token(AUTOMATIC);
      break;
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/*
 *  A.2.2   Declaration data types
 */

/*
 *  A.2.2.1     Net and variable types
 */
  final public void DataType() throws ParseException {
    jj_consume_token(INT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SIGNED:
    case UNSIGNED:
      Signing();
      break;
    default:
      jj_la1[37] = jj_gen;
      ;
    }
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case LBRACKET:
      case BANG:
      case TILDE:
      case PLUS:
      case MINUS:
      case BIT_AND:
      case BIT_OR:
      case XOR:
      case NXOR:
      case XNOT:
      case 164:
      case 165:
        ;
        break;
      default:
        jj_la1[38] = jj_gen;
        break label_12;
      }
      PackedDimension();
    }
  }

  final public void NetType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUPPLY0:
      jj_consume_token(SUPPLY0);
      break;
    case SUPPLY1:
      jj_consume_token(SUPPLY1);
      break;
    case TRI:
      jj_consume_token(TRI);
      break;
    case TRIAND:
      jj_consume_token(TRIAND);
      break;
    case TRIOR:
      jj_consume_token(TRIOR);
      break;
    case TRI0:
      jj_consume_token(TRI0);
      break;
    case TRI1:
      jj_consume_token(TRI1);
      break;
    case WIRE:
      jj_consume_token(WIRE);
      break;
    case WAND:
      jj_consume_token(WAND);
      break;
    case WOR:
      jj_consume_token(WOR);
      break;
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void PortType() throws ParseException {
    NetTypeOrTrireg();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SIGNED:
    case UNSIGNED:
      Signing();
      break;
    default:
      jj_la1[40] = jj_gen;
      ;
    }
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case LBRACKET:
      case BANG:
      case TILDE:
      case PLUS:
      case MINUS:
      case BIT_AND:
      case BIT_OR:
      case XOR:
      case NXOR:
      case XNOT:
      case 164:
      case 165:
        ;
        break;
      default:
        jj_la1[41] = jj_gen;
        break label_13;
      }
      PackedDimension();
    }
  }

  final public void NetTypeOrTrireg() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUPPLY0:
    case SUPPLY1:
    case TRI:
    case TRI0:
    case TRI1:
    case TRIAND:
    case TRIOR:
    case WAND:
    case WIRE:
    case WOR:
      NetType();
      break;
    case TRIREG:
      jj_consume_token(TRIREG);
      break;
    default:
      jj_la1[42] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Signing() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SIGNED:
      jj_consume_token(SIGNED);
      break;
    case UNSIGNED:
      jj_consume_token(UNSIGNED);
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/*
 *  A.2.3   Declatation lists
 */
  final public void ListOfPortIdentifiers() throws ParseException {
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case BANG:
    case TILDE:
    case PLUS:
    case MINUS:
    case BIT_AND:
    case BIT_OR:
    case XOR:
    case NXOR:
    case XNOT:
    case 164:
    case 165:
      UnpackedDimension();
      break;
    default:
      jj_la1[44] = jj_gen;
      ;
    }
  }

  final public void ListOfVariableDeclAssignments() throws ParseException {
    VariableDeclAssignment();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[45] = jj_gen;
        break label_14;
      }
      jj_consume_token(COMMA);
      VariableDeclAssignment();
    }
  }

  final public void ListOfVariablePortIdentifiers() throws ParseException {
    jj_consume_token(IDENTIFIER);
    VariableDimension();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      ConstantExpression();
      break;
    default:
      jj_la1[46] = jj_gen;
      ;
    }
  }

/*
 *  A.2.3   Declatation assignments
 */
  final public void VariableDeclAssignment() throws ParseException {
    jj_consume_token(IDENTIFIER);
    VariableDimension();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      Expression();
      break;
    default:
      jj_la1[47] = jj_gen;
      ;
    }
  }

/*
 *  A.2.5   Declaration ranges
 */
  final public void UnpackedDimension() throws ParseException {
    if (jj_2_15(3)) {
      ConstantRange();
    } else if (jj_2_16(3)) {
      ConstantExpression();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void PackedDimension() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case BANG:
    case TILDE:
    case PLUS:
    case MINUS:
    case BIT_AND:
    case BIT_OR:
    case XOR:
    case NXOR:
    case XNOT:
    case 164:
    case 165:
      ConstantRange();
      break;
    case LBRACKET:
      UnsizedDimension();
      break;
    default:
      jj_la1[48] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void AssociativeDimension() throws ParseException {
    if (jj_2_17(2)) {
      jj_consume_token(LBRACKET);
      DataType();
      jj_consume_token(RBRACKET);
    } else if (jj_2_18(2)) {
      jj_consume_token(LBRACKET);
      jj_consume_token(STAR);
      jj_consume_token(RBRACKET);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void VariableDimension() throws ParseException {
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case LBRACKET:
      case BANG:
      case TILDE:
      case PLUS:
      case MINUS:
      case BIT_AND:
      case BIT_OR:
      case XOR:
      case NXOR:
      case XNOT:
      case 164:
      case 165:
        ;
        break;
      default:
        jj_la1[49] = jj_gen;
        break label_15;
      }
      SizeOrUnsizedDimension();
    }
  }

  final public void QueueDimension() throws ParseException {
    jj_consume_token(LBRACKET);
    jj_consume_token(156);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      ConstantExpression();
      break;
    default:
      jj_la1[50] = jj_gen;
      ;
    }
    jj_consume_token(RBRACKET);
  }

  final public void UnsizedDimension() throws ParseException {
    jj_consume_token(LBRACKET);
    jj_consume_token(RBRACKET);
  }

  final public void SizeOrUnsizedDimension() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case BANG:
    case TILDE:
    case PLUS:
    case MINUS:
    case BIT_AND:
    case BIT_OR:
    case XOR:
    case NXOR:
    case XNOT:
    case 164:
    case 165:
      UnpackedDimension();
      break;
    case LBRACKET:
      UnsizedDimension();
      break;
    default:
      jj_la1[51] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/*
 *  A.3 Primitive Instances 
 */

/*
 *  A.4 Module, interface and generated instantiation
 */

/*
 *  A.5 UDP declaration and instantiation
 */

/*
 *  A.6 Behavioral statements
 */

/*
 *  A.7 Specify section
 */

/*
 *  A.8 Expressions
 */

/*
 *  A.8.3   Expressions
 */
  final public void ConstantExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      ConstantPrimary();
      break;
    case BANG:
    case TILDE:
    case PLUS:
    case MINUS:
    case BIT_AND:
    case BIT_OR:
    case XOR:
    case NXOR:
    case XNOT:
    case 164:
    case 165:
      UnaryOperator();
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 166:
          ;
          break;
        default:
          jj_la1[52] = jj_gen;
          break label_16;
        }
        AttributeInstance();
      }
      ConstantPrimary();
      break;
    default:
      jj_la1[53] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ConstantRange() throws ParseException {
    ConstantExpression();
    jj_consume_token(COLON);
    ConstantExpression();
  }

  final public void Expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      Primary();
      break;
    case BANG:
    case TILDE:
    case PLUS:
    case MINUS:
    case BIT_AND:
    case BIT_OR:
    case XOR:
    case NXOR:
    case XNOT:
    case 164:
    case 165:
      UnaryOperator();
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 166:
          ;
          break;
        default:
          jj_la1[54] = jj_gen;
          break label_17;
        }
        AttributeInstance();
      }
      Primary();
      break;
    default:
      jj_la1[55] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/*
 *  A.8.4   Primaries
 */
  final public void Primary() throws ParseException {
    jj_consume_token(INTEGER_LITERAL);
  }

  final public void ConstantPrimary() throws ParseException {
    jj_consume_token(INTEGER_LITERAL);
  }

  final public void TimeLiteral() throws ParseException {
    if (jj_2_19(2)) {
      UnsignedNumber();
      TimeUnit();
    } else if (jj_2_20(2)) {
      FixedPointNumber();
      TimeUnit();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void TimeUnit() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 157:
      jj_consume_token(157);
      break;
    case 158:
      jj_consume_token(158);
      break;
    case 159:
      jj_consume_token(159);
      break;
    case 160:
      jj_consume_token(160);
      break;
    case 161:
      jj_consume_token(161);
      break;
    case 162:
      jj_consume_token(162);
      break;
    case 163:
      jj_consume_token(163);
      break;
    default:
      jj_la1[56] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ConstantSelect() throws ParseException {
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[57] = jj_gen;
        break label_18;
      }
      jj_consume_token(LBRACKET);
      ConstantExpression();
      jj_consume_token(RBRACKET);
    }
  }

/*
 *  A.8.6   Operators
 */
  final public void UnaryOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
      break;
    case MINUS:
      jj_consume_token(MINUS);
      break;
    case BANG:
      jj_consume_token(BANG);
      break;
    case TILDE:
      jj_consume_token(TILDE);
      break;
    case BIT_AND:
      jj_consume_token(BIT_AND);
      break;
    case 164:
      jj_consume_token(164);
      break;
    case BIT_OR:
      jj_consume_token(BIT_OR);
      break;
    case 165:
      jj_consume_token(165);
      break;
    case XOR:
      jj_consume_token(XOR);
      break;
    case NXOR:
      jj_consume_token(NXOR);
      break;
    case XNOT:
      jj_consume_token(XNOT);
      break;
    default:
      jj_la1[58] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/*
 *  A.8.7   Numbers
 */
  final public void FixedPointNumber() throws ParseException {
    UnsignedNumber();
    jj_consume_token(DOT);
    UnsignedNumber();
  }

  final public void UnsignedNumber() throws ParseException {
    jj_consume_token(INTEGER_LITERAL);
  }

/*
 *  A.9 General
 */

/*
 *  A.9.1   Attributes
 */
  final public void AttributeInstance() throws ParseException {
    jj_consume_token(166);
    AttrSpec();
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[59] = jj_gen;
        break label_19;
      }
      jj_consume_token(COMMA);
      AttrSpec();
    }
    jj_consume_token(167);
  }

  final public void AttrSpec() throws ParseException {
    VariableDeclaration();
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    xsp = jj_scanpos;
    if (jj_3R_39()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    xsp = jj_scanpos;
    if (jj_3R_40()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_31()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_30()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_31()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_30()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_49()) jj_scanpos = xsp;
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) jj_scanpos = xsp;
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_67() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) return true;
    }
    return false;
  }

  private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_scan_token(166)) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3_10() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_28()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3_9() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_26()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3_8() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_24()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(88)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(88)) return true;
    return false;
  }

  private boolean jj_3R_66() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(61)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) return true;
    }
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(127)) {
    jj_scanpos = xsp;
    if (jj_scan_token(128)) {
    jj_scanpos = xsp;
    if (jj_scan_token(115)) {
    jj_scanpos = xsp;
    if (jj_scan_token(116)) {
    jj_scanpos = xsp;
    if (jj_scan_token(131)) {
    jj_scanpos = xsp;
    if (jj_scan_token(164)) {
    jj_scanpos = xsp;
    if (jj_scan_token(132)) {
    jj_scanpos = xsp;
    if (jj_scan_token(165)) {
    jj_scanpos = xsp;
    if (jj_scan_token(133)) {
    jj_scanpos = xsp;
    if (jj_scan_token(134)) {
    jj_scanpos = xsp;
    if (jj_scan_token(135)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_scan_token(76)) return true;
    }
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(TIMEPRECISION)) return true;
    if (jj_3R_23()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_3R_55()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_58()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(TIMEUNIT)) return true;
    if (jj_3R_23()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(157)) {
    jj_scanpos = xsp;
    if (jj_scan_token(158)) {
    jj_scanpos = xsp;
    if (jj_scan_token(159)) {
    jj_scanpos = xsp;
    if (jj_scan_token(160)) {
    jj_scanpos = xsp;
    if (jj_scan_token(161)) {
    jj_scanpos = xsp;
    if (jj_scan_token(162)) {
    jj_scanpos = xsp;
    if (jj_scan_token(163)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) return true;
    }
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(64)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_scan_token(87)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(EXTERN)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) return true;
    }
    return false;
  }

  private boolean jj_3_19() {
    if (jj_scan_token(88)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(EXTERN)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(INT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_60()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(62)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) return true;
    }
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_3R_34()) return true;
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_3R_33()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_44()) jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    xsp = jj_scanpos;
    if (jj_3R_45()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(OUTPUT)) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_3R_61()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_62()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(88)) return true;
    return false;
  }

  private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(88)) {
    jj_scanpos = xsp;
    if (jj_3R_50()) return true;
    }
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(INPUT)) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    xsp = jj_scanpos;
    if (jj_3R_42()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    xsp = jj_scanpos;
    if (jj_3R_43()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(INOUT)) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_3R_46()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public JccVerilogParserTokenManager token_source;
  JccVerilogParserCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[60];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
      jj_la1_init_5();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x200,0x0,0x0,0x200,0x0,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x18002,0x0,0x0,0x0,0x40000000,0x0,0x0,0x40000000,0x4080700,0x0,0x40000000,0x80300,0x0,0x80300,0x0,0x80300,0x0,0x18000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4080300,0x4080300,0x4080300,0x0,0x0,0x0,0x0,0x40000000,0x20000000,0x0,0x0,0x20000000,0x0,0x0,0x20000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x60,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd01f83,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x60,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x0,0x1000000,0x1000000,0x0,0x20000,0x1000000,0xd00f83,0x20000,0x1000000,0xd01f83,0x20000,0x1000000,0x0,0x0,0x0,0x1000000,0x1000000,0x0,0x1000000,0x0,0x1000000,0x0,0x1000000,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0x0,0x400000,0x0,0x400000,0x0,0x0,0x2000,0x2000,0x0,0x0,0x0,0x108,0x4108,0x2000,0x108,0x0,0x0,0x0,0x80180000,0x10000,0x80180000,0x80180000,0x0,0x0,0x80180400,0x0,0x0,0x80180400,0x0,0x0,0x80180000,0x2000,0x10000,0x10000,0x80180400,0x80180400,0x400000,0x80180400,0x0,0x80180000,0x0,0x80180000,0x0,0x400,0x80180000,0x2000,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x2000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf9,0x0,0xf9,0xf9,0x0,0x0,0xf9,0x0,0x0,0xf9,0x0,0x0,0xf9,0x0,0x0,0x0,0xf9,0xf9,0x0,0xf9,0x0,0xf9,0x0,0xf9,0xe0000000,0x0,0xf9,0x0,};
   }
   private static void jj_la1_init_5() {
      jj_la1_5 = new int[] {0x0,0x40,0x0,0x0,0x40,0x0,0x0,0x40,0x0,0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x40,0x40,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x30,0x0,0x30,0x30,0x0,0x0,0x30,0x0,0x0,0x30,0x0,0x0,0x30,0x0,0x0,0x0,0x30,0x30,0x0,0x30,0x40,0x30,0x40,0x30,0xf,0x0,0x30,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[20];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public JccVerilogParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public JccVerilogParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JccVerilogParserCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JccVerilogParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public JccVerilogParser(java.io.Reader stream) {
    jj_input_stream = new JccVerilogParserCharStream(stream, 1, 1);
    token_source = new JccVerilogParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public JccVerilogParser(JccVerilogParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(JccVerilogParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[168];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 60; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 168; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 20; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
