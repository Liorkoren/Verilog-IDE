/* Generated By:JavaCC: Do not edit this line. JccVerilogParserConstants.java */
package com.koltem.jccverilogparser ;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface JccVerilogParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int WHITESPACE = 1;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 4;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 5;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 6;
  /** RegularExpression Id. */
  int ASSERT = 8;
  /** RegularExpression Id. */
  int AUTOMATIC = 9;
  /** RegularExpression Id. */
  int BEGIN = 10;
  /** RegularExpression Id. */
  int BOOLEAN = 11;
  /** RegularExpression Id. */
  int BREAK = 12;
  /** RegularExpression Id. */
  int BYTE = 13;
  /** RegularExpression Id. */
  int CASE = 14;
  /** RegularExpression Id. */
  int CATCH = 15;
  /** RegularExpression Id. */
  int CHAR = 16;
  /** RegularExpression Id. */
  int CLASS = 17;
  /** RegularExpression Id. */
  int CONST = 18;
  /** RegularExpression Id. */
  int CONSTLY = 19;
  /** RegularExpression Id. */
  int CONTEXT = 20;
  /** RegularExpression Id. */
  int CONTINUE = 21;
  /** RegularExpression Id. */
  int _DEFAULT = 22;
  /** RegularExpression Id. */
  int DO = 23;
  /** RegularExpression Id. */
  int DOUBLE = 24;
  /** RegularExpression Id. */
  int ELSE = 25;
  /** RegularExpression Id. */
  int END = 26;
  /** RegularExpression Id. */
  int ENDCASE = 27;
  /** RegularExpression Id. */
  int ENDFUNCTION = 28;
  /** RegularExpression Id. */
  int ENDMODULE = 29;
  /** RegularExpression Id. */
  int ENDTASK = 30;
  /** RegularExpression Id. */
  int ENUM = 31;
  /** RegularExpression Id. */
  int EXTENDS = 32;
  /** RegularExpression Id. */
  int EXTERN = 33;
  /** RegularExpression Id. */
  int FALSE = 34;
  /** RegularExpression Id. */
  int FOR = 35;
  /** RegularExpression Id. */
  int FUNCTION = 36;
  /** RegularExpression Id. */
  int GOTO = 37;
  /** RegularExpression Id. */
  int IF = 38;
  /** RegularExpression Id. */
  int IMPORT = 39;
  /** RegularExpression Id. */
  int INOUT = 40;
  /** RegularExpression Id. */
  int INPUT = 41;
  /** RegularExpression Id. */
  int INT = 42;
  /** RegularExpression Id. */
  int INTEGER = 43;
  /** RegularExpression Id. */
  int INTERFACE = 44;
  /** RegularExpression Id. */
  int LOCAL = 45;
  /** RegularExpression Id. */
  int LONG = 46;
  /** RegularExpression Id. */
  int MACROMODULE = 47;
  /** RegularExpression Id. */
  int MODULE = 48;
  /** RegularExpression Id. */
  int NEW = 49;
  /** RegularExpression Id. */
  int NULL = 50;
  /** RegularExpression Id. */
  int OUTPUT = 51;
  /** RegularExpression Id. */
  int PACKAGE = 52;
  /** RegularExpression Id. */
  int PRIORITY = 53;
  /** RegularExpression Id. */
  int PROTECTED = 54;
  /** RegularExpression Id. */
  int PUBLIC = 55;
  /** RegularExpression Id. */
  int PURE = 56;
  /** RegularExpression Id. */
  int REAL = 57;
  /** RegularExpression Id. */
  int REF = 58;
  /** RegularExpression Id. */
  int RETURN = 59;
  /** RegularExpression Id. */
  int SHORT = 60;
  /** RegularExpression Id. */
  int SIGNED = 61;
  /** RegularExpression Id. */
  int STATIC = 62;
  /** RegularExpression Id. */
  int SUPER = 63;
  /** RegularExpression Id. */
  int SUPPLY0 = 64;
  /** RegularExpression Id. */
  int SUPPLY1 = 65;
  /** RegularExpression Id. */
  int TAGGED = 66;
  /** RegularExpression Id. */
  int TASK = 67;
  /** RegularExpression Id. */
  int THIS = 68;
  /** RegularExpression Id. */
  int TIMEPRECISION = 69;
  /** RegularExpression Id. */
  int TIMEUNIT = 70;
  /** RegularExpression Id. */
  int TRI = 71;
  /** RegularExpression Id. */
  int TRI0 = 72;
  /** RegularExpression Id. */
  int TRI1 = 73;
  /** RegularExpression Id. */
  int TRIAND = 74;
  /** RegularExpression Id. */
  int TRIOR = 75;
  /** RegularExpression Id. */
  int TRIREG = 76;
  /** RegularExpression Id. */
  int TRUE = 77;
  /** RegularExpression Id. */
  int TRY = 78;
  /** RegularExpression Id. */
  int TYPEDEF = 79;
  /** RegularExpression Id. */
  int UNIQUE = 80;
  /** RegularExpression Id. */
  int UNSIGNED = 81;
  /** RegularExpression Id. */
  int VIRTUAL = 82;
  /** RegularExpression Id. */
  int VOID = 83;
  /** RegularExpression Id. */
  int WAND = 84;
  /** RegularExpression Id. */
  int WHILE = 85;
  /** RegularExpression Id. */
  int WIRE = 86;
  /** RegularExpression Id. */
  int WOR = 87;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 88;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 89;
  /** RegularExpression Id. */
  int HEX_LITERAL = 90;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 91;
  /** RegularExpression Id. */
  int REALING_POINT_LITERAL = 92;
  /** RegularExpression Id. */
  int DECIMAL_REALING_POINT_LITERAL = 93;
  /** RegularExpression Id. */
  int DECIMAL_EXPONENT = 94;
  /** RegularExpression Id. */
  int HEXADECIMAL_REALING_POINT_LITERAL = 95;
  /** RegularExpression Id. */
  int HEXADECIMAL_EXPONENT = 96;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 97;
  /** RegularExpression Id. */
  int STRING_LITERAL = 98;
  /** RegularExpression Id. */
  int IDENTIFIER = 99;
  /** RegularExpression Id. */
  int LETTER = 100;
  /** RegularExpression Id. */
  int PART_LETTER = 101;
  /** RegularExpression Id. */
  int LPAREN = 102;
  /** RegularExpression Id. */
  int RPAREN = 103;
  /** RegularExpression Id. */
  int LBRACE = 104;
  /** RegularExpression Id. */
  int RBRACE = 105;
  /** RegularExpression Id. */
  int LBRACKET = 106;
  /** RegularExpression Id. */
  int RBRACKET = 107;
  /** RegularExpression Id. */
  int SEMICOLON = 108;
  /** RegularExpression Id. */
  int COMMA = 109;
  /** RegularExpression Id. */
  int DOT = 110;
  /** RegularExpression Id. */
  int AT = 111;
  /** RegularExpression Id. */
  int ASSIGN = 112;
  /** RegularExpression Id. */
  int LT = 113;
  /** RegularExpression Id. */
  int GT = 114;
  /** RegularExpression Id. */
  int BANG = 115;
  /** RegularExpression Id. */
  int TILDE = 116;
  /** RegularExpression Id. */
  int HOOK = 117;
  /** RegularExpression Id. */
  int COLON = 118;
  /** RegularExpression Id. */
  int EQ = 119;
  /** RegularExpression Id. */
  int LE = 120;
  /** RegularExpression Id. */
  int GE = 121;
  /** RegularExpression Id. */
  int NE = 122;
  /** RegularExpression Id. */
  int SC_OR = 123;
  /** RegularExpression Id. */
  int SC_AND = 124;
  /** RegularExpression Id. */
  int INCR = 125;
  /** RegularExpression Id. */
  int DECR = 126;
  /** RegularExpression Id. */
  int PLUS = 127;
  /** RegularExpression Id. */
  int MINUS = 128;
  /** RegularExpression Id. */
  int STAR = 129;
  /** RegularExpression Id. */
  int SLASH = 130;
  /** RegularExpression Id. */
  int BIT_AND = 131;
  /** RegularExpression Id. */
  int BIT_OR = 132;
  /** RegularExpression Id. */
  int XOR = 133;
  /** RegularExpression Id. */
  int NXOR = 134;
  /** RegularExpression Id. */
  int XNOT = 135;
  /** RegularExpression Id. */
  int REM = 136;
  /** RegularExpression Id. */
  int PLUSASSIGN = 137;
  /** RegularExpression Id. */
  int MINUSASSIGN = 138;
  /** RegularExpression Id. */
  int STARASSIGN = 139;
  /** RegularExpression Id. */
  int SLASHASSIGN = 140;
  /** RegularExpression Id. */
  int ANDASSIGN = 141;
  /** RegularExpression Id. */
  int ORASSIGN = 142;
  /** RegularExpression Id. */
  int XORASSIGN = 143;
  /** RegularExpression Id. */
  int REMASSIGN = 144;
  /** RegularExpression Id. */
  int LSHIFT = 145;
  /** RegularExpression Id. */
  int RSIGNEDSHIFT = 146;
  /** RegularExpression Id. */
  int LSHIFTASSIGN = 147;
  /** RegularExpression Id. */
  int RSIGNEDSHIFTASSIGN = 148;
  /** RegularExpression Id. */
  int LUNSIGNEDSHIFT = 149;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFT = 150;
  /** RegularExpression Id. */
  int LUNSIGNEDSHIFTASSIGN = 151;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFTASSIGN = 152;
  /** RegularExpression Id. */
  int STUFF_TO_IGNORE = 154;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_FORMAL_COMMENT = 1;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<WHITESPACE>",
    "<token of kind 2>",
    "\"/*\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "\"*/\"",
    "<token of kind 7>",
    "\"assert\"",
    "\"automatic\"",
    "\"begin\"",
    "\"boolean\"",
    "\"break\"",
    "\"byte\"",
    "\"case\"",
    "\"catch\"",
    "\"char\"",
    "\"class\"",
    "\"const\"",
    "\"constly\"",
    "\"context\"",
    "\"continue\"",
    "\"default\"",
    "\"do\"",
    "\"double\"",
    "\"else\"",
    "\"end\"",
    "\"endcase\"",
    "\"endfunction\"",
    "\"endmodule\"",
    "\"endtask\"",
    "\"enum\"",
    "\"extends\"",
    "\"extern\"",
    "\"false\"",
    "\"for\"",
    "\"function\"",
    "\"goto\"",
    "\"if\"",
    "\"import\"",
    "\"inout\"",
    "\"input\"",
    "\"int\"",
    "\"integer\"",
    "\"interface\"",
    "\"private\"",
    "\"long\"",
    "\"macromodule\"",
    "\"module\"",
    "\"new\"",
    "\"null\"",
    "\"output\"",
    "\"package\"",
    "\"priority\"",
    "\"protected\"",
    "\"public\"",
    "\"pure\"",
    "\"real\"",
    "\"ref\"",
    "\"return\"",
    "\"short\"",
    "\"signed\"",
    "\"static\"",
    "\"super\"",
    "\"supply0\"",
    "\"supply1\"",
    "\"tagged\"",
    "\"task\"",
    "\"this\"",
    "\"timeprecision\"",
    "\"timeunit\"",
    "\"tri\"",
    "\"tri0\"",
    "\"tri1\"",
    "\"triand\"",
    "\"trior\"",
    "\"trireg\"",
    "\"true\"",
    "\"try\"",
    "\"typedef\"",
    "\"unique\"",
    "\"unsigned\"",
    "\"virtual\"",
    "\"void\"",
    "\"wand\"",
    "\"while\"",
    "\"wire\"",
    "\"wor\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<REALING_POINT_LITERAL>",
    "<DECIMAL_REALING_POINT_LITERAL>",
    "<DECIMAL_EXPONENT>",
    "<HEXADECIMAL_REALING_POINT_LITERAL>",
    "<HEXADECIMAL_EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<PART_LETTER>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"@\"",
    "\"=\"",
    "\"<\"",
    "\">\"",
    "\"!\"",
    "\"~\"",
    "\"?\"",
    "\":\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"~^\"",
    "\"^~\"",
    "\"%\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"%=\"",
    "\"<<\"",
    "\">>\"",
    "\"<<=\"",
    "\">>=\"",
    "\"<<<\"",
    "\">>>\"",
    "\"<<<=\"",
    "\">>>=\"",
    "\"\\u001a\"",
    "<STUFF_TO_IGNORE>",
    "\".*\"",
    "\"$\"",
    "\"s\"",
    "\"ms\"",
    "\"us\"",
    "\"ns\"",
    "\"ps\"",
    "\"fs\"",
    "\"step\"",
    "\"~&\"",
    "\"~|\"",
    "\"(*\"",
    "\"*)\"",
  };

}
